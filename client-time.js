#!/usr/bin/env node

/**
 * –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è + –≤—Ä–µ–º—è –±–æ—Ç–∞
 * Usage: node client-time.js [–¥–Ω–∏] [–ø—Ä–æ–µ–∫—Ç]
 */

const axios = require('axios');

const ACTIVITY_WATCH_URL = 'http://localhost:5600/api/0';
const BOT_BUCKET = 'claude-bot-sessions';
const WINDOW_BUCKET = 'aw-watcher-window_errogaht-G1619-04';

async function getClientTime(days = 1, project = 'it-fit') {
    try {
        console.log(`\nüí∞ –í–†–ï–ú–Ø –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê: –ø—Ä–æ–µ–∫—Ç "${project}" (${days} –¥–Ω.)\n`);

        // 1. –ü–û–õ–£–ß–ò–¢–¨ –í–†–ï–ú–Ø –ë–û–¢–ê (—Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º)
        let botTime = 0, botOriginalTime = 0, multiplier = 1, botEvents = [];
        
        try {
            const botResponse = await axios.get(`${ACTIVITY_WATCH_URL}/buckets/${BOT_BUCKET}/events?limit=100`, {timeout: 5000});
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - days);

            botEvents = botResponse.data.filter(event => {
                const eventDate = new Date(event.timestamp);
                return event.data.project === project && eventDate >= cutoffDate;
            });

            botTime = botEvents.reduce((sum, event) => sum + event.duration, 0) / 3600; // –≤ —á–∞—Å–∞—Ö
            botOriginalTime = botEvents.reduce((sum, event) => sum + (event.data.original_duration || event.duration), 0) / 3600;
            multiplier = botEvents[0]?.data?.time_multiplier || 1;
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –±–æ—Ç–∞:', error.message);
        }

        // 2. –ü–û–õ–£–ß–ò–¢–¨ –û–ë–´–ß–ù–û–ï –í–†–ï–ú–Ø (–æ–∫–Ω–∞/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)  
        let windowTime = 0, windowEvents = [];
        
        try {
            const windowResponse = await axios.get(`${ACTIVITY_WATCH_URL}/buckets/${WINDOW_BUCKET}/events?limit=100`, {timeout: 5000});
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - days);
        
            const todayStr = new Date().toISOString().split('T')[0];
            if (days === 1) {
                // –î–ª—è —Å–µ–≥–æ–¥–Ω—è - —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞
                windowEvents = windowResponse.data.filter(event => 
                    event.timestamp.startsWith(todayStr) && 
                    (event.data.title || '').toLowerCase().includes(project.toLowerCase())
                );
            } else {
                // –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π - –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                windowEvents = windowResponse.data.filter(event => {
                    const eventDate = new Date(event.timestamp);
                    return eventDate >= cutoffDate && 
                           (event.data.title || '').toLowerCase().includes(project.toLowerCase());
                });
            }

            windowTime = windowEvents.reduce((sum, event) => sum + event.duration, 0) / 3600; // –≤ —á–∞—Å–∞—Ö
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è:', error.message);
        }

        // 3. –ò–¢–û–ì–ò
        const totalTime = windowTime + botTime;
        
        console.log('üìä –†–ê–ó–ë–ò–í–ö–ê:');
        console.log('=' .repeat(50));
        console.log(`üñ•Ô∏è  –û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–æ–∫–Ω–∞):     ${windowTime.toFixed(2)} —á`);
        console.log(`ü§ñ –†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º:            ${botOriginalTime.toFixed(2)} —á ‚Üí ${botTime.toFixed(2)} —á (${multiplier}x)`);
        console.log('=' .repeat(50));
        console.log(`üí∞ –ò–¢–û–ì–û –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:         ${totalTime.toFixed(2)} —á`);
        
        // 4. –î–ï–¢–ê–õ–ò
        console.log(`\nüìà –î–ï–¢–ê–õ–ò:`);
        console.log(`- –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è: ${windowEvents.length} —Å–æ–±—ã—Ç–∏–π, ${windowTime.toFixed(2)} —á–∞—Å–æ–≤`);
        console.log(`- –í—Ä–µ–º—è –±–æ—Ç–∞: ${botEvents.length} —Å–µ—Å—Å–∏–π, ${botTime.toFixed(2)} —á–∞—Å–æ–≤ (–º–Ω–æ–∂–∏—Ç–µ–ª—å ${multiplier}x)`);
        console.log(`- –î–∞—Ç–∞: ${days === 1 ? '—Å–µ–≥–æ–¥–Ω—è' : `–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π`}`);

        // 5. –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–£
        console.log(`\nüìù –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê:`);
        console.log(`–ü—Ä–æ–µ–∫—Ç: ${project}`);
        console.log(`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`);
        console.log(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${totalTime.toFixed(2)} —á–∞—Å–æ–≤`);

        return {
            windowTime: windowTime,
            botTime: botTime,
            totalTime: totalTime,
            botSessions: botEvents.length,
            windowEvents: windowEvents.length
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å:');
        console.log('‚Ä¢ ActivityWatch –∑–∞–ø—É—â–µ–Ω: curl http://localhost:5600/api/0/info');
        console.log('‚Ä¢ –ë–æ—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è');
    }
}

// –ó–∞–ø—É—Å–∫
const days = parseInt(process.argv[2]) || 1;
const project = process.argv[3] || 'it-fit';

getClientTime(days, project);