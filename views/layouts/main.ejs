<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, viewport-fit=cover">
    <title><%= title || 'Development Tools' %></title>
    
    <!-- Vue.js -->
    <script src="/static/assets/vue.min.js"></script>
    
    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/line-numbers/prism-line-numbers.min.css">
    
    <!-- Common styles -->
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            margin: 0; padding: 10px; background: #f5f5f5; 
            min-height: 100vh; overflow-x: hidden;
        }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { border-bottom: 1px solid #e1e1e1; padding-bottom: 15px; margin-bottom: 20px; }
        .back-link { display: inline-block; margin-bottom: 15px; color: #666; text-decoration: none; padding: 8px 12px; background: #f8f9fa; border-radius: 4px; }
        .back-link:hover { color: #007cba; background: #e9ecef; }
        .breadcrumbs { color: #666; margin-bottom: 10px; }
        .breadcrumbs a { color: #007cba; text-decoration: none; }
        .breadcrumbs a:hover { text-decoration: underline; }
        
        /* Version selector styles */
        .version-selector { 
            margin: 20px 0; padding: 20px; background: #e6f3ff; border-radius: 8px; 
            border: 2px dashed #007cba; text-align: center;
        }
        .version-selector h3 { 
            margin: 0 0 15px 0; color: #007cba; font-size: 1.1em; 
        }
        .version-buttons { 
            display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;
        }
        .version-btn { 
            padding: 12px 20px; border-radius: 6px; text-decoration: none; 
            font-weight: 600; transition: all 0.2s; display: inline-block;
            min-width: 140px; text-align: center;
        }
        .version-btn.current { 
            background: #6c757d; color: white; border: 2px solid #6c757d; 
        }
        .version-btn.vue { 
            background: linear-gradient(135deg, #4FC08D 0%, #42b883 100%); 
            color: white; border: 2px solid #4FC08D; 
        }
        .version-btn:hover { 
            transform: translateY(-1px); filter: brightness(1.1);
        }
        
        /* Vue badge */
        .vue-badge {
            display: inline-block; background: linear-gradient(135deg, #4FC08D 0%, #42b883 100%);
            color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.8em;
            font-weight: 600; margin-left: 10px;
        }
        
        @media (max-width: 768px) { 
            .container { padding: 10px; margin: 10px; }
            .version-buttons { flex-direction: column; align-items: center; }
            .version-btn { min-width: 200px; }
        }
    </style>
    
    <!-- Additional page-specific styles -->
    <%- include('../partials/head') %>
</head>
<body>
    <div id="app">
        <%- body %>
    </div>
    
    <!-- Common scripts -->
    <%- include('../partials/scripts') %>
    
    <!-- Page-specific Vue components -->
    <script>
        // Token Management System (Vue-compatible)
        class TokenManager {
            constructor() {
                this.COOKIE_NAME = 'auth_token';
                this.COOKIE_EXPIRES_DAYS = 7;
                this.init();
            }

            init() {
                const urlToken = this.getTokenFromUrl();
                if (urlToken) {
                    this.saveTokenToCookie(urlToken);
                    this.cleanUrl();
                }
            }

            getTokenFromUrl() {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('token');
            }

            saveTokenToCookie(token) {
                const expires = new Date();
                expires.setTime(expires.getTime() + (this.COOKIE_EXPIRES_DAYS * 24 * 60 * 60 * 1000));
                document.cookie = this.COOKIE_NAME + '=' + token + ';expires=' + expires.toUTCString() + ';path=/;SameSite=Lax';
            }

            getTokenFromCookie() {
                const name = this.COOKIE_NAME + '=';
                const decodedCookie = decodeURIComponent(document.cookie);
                const ca = decodedCookie.split(';');
                for (let i = 0; i < ca.length; i++) {
                    let c = ca[i];
                    while (c.charAt(0) === ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) === 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return null;
            }

            cleanUrl() {
                const url = new URL(window.location);
                url.searchParams.delete('token');
                window.history.replaceState({}, document.title, url.toString());
            }

            addTokenToUrl(url) {
                const token = this.getTokenFromCookie();
                if (!token) return url;

                const urlObj = new URL(url, window.location.origin);
                if (!urlObj.searchParams.has('token')) {
                    urlObj.searchParams.set('token', token);
                }
                return urlObj.toString();
            }
        }

        // Initialize token manager
        const tokenManager = new TokenManager();
    </script>
</body>
</html>