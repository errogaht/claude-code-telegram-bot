<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, viewport-fit=cover">
    <title>üìä Git Status - Vue Version</title>
    
    <!-- Vue.js -->
    <script src="/static/assets/vue.min.js"></script>
    
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            margin: 0; padding: 10px; background: #f5f5f5; 
            min-height: 100vh; overflow-x: hidden;
        }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { border-bottom: 1px solid #e1e1e1; padding-bottom: 15px; margin-bottom: 20px; }
        .back-link { display: inline-block; margin-bottom: 15px; color: #666; text-decoration: none; padding: 8px 12px; background: #f8f9fa; border-radius: 4px; }
        .back-link:hover { color: #007cba; background: #e9ecef; }
        .nav-links { margin-bottom: 15px; }
        .nav-links a { 
            display: inline-block; margin-right: 15px; padding: 8px 12px; 
            background: #f8f9fa; border-radius: 4px; text-decoration: none; 
            color: #333; border: 1px solid #e1e1e1;
        }
        .nav-links a:hover { background: #e9ecef; }
        .nav-links a.active { background: #4FC08D; color: white; }
        .status-content { 
            background: #f8f9fa; border: 1px solid #e1e1e1; border-radius: 4px; padding: 20px;
            font-family: 'Monaco', 'Consolas', 'Courier New', monospace;
            font-size: 14px; line-height: 1.5; white-space: pre-wrap;
        }
        .vue-badge {
            display: inline-block; background: linear-gradient(135deg, #4FC08D 0%, #42b883 100%);
            color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.8em;
            font-weight: 600; margin-left: 10px;
        }
        
        /* Vue-specific enhancements */
        .status-actions { 
            margin-bottom: 15px; display: flex; gap: 10px; flex-wrap: wrap; align-items: center;
        }
        .action-btn { 
            padding: 6px 12px; background: #007cba; color: white; text-decoration: none; 
            border-radius: 4px; font-size: 14px; transition: background 0.2s; border: none; cursor: pointer;
        }
        .action-btn:hover { background: #005a85; }
        .refresh-btn { background: #28a745; }
        .refresh-btn:hover { background: #218838; }
        .loading { text-align: center; padding: 40px; color: #666; }
        .last-updated { font-size: 12px; color: #666; margin-top: 10px; }
        
        @media (max-width: 768px) { 
            .container { padding: 10px; margin: 10px; }
            .status-content { font-size: 12px; padding: 15px; }
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="container">
            <div class="header">
                <a href="/v2/git" class="back-link">‚Üê Back to file list</a>
                <h1>üìä Git Status <span class="vue-badge">Vue.js</span></h1>
                <div class="nav-links">
                    <a href="/v2/git">Changed Files</a>
                    <a href="/v2/git/status" class="active">Full Status</a>
                </div>
            </div>
            
            <git-status-vue 
                :initial-status="<%= JSON.stringify(status) %>">
            </git-status-vue>
        </div>
    </div>
    
    <script>
        // Token Management
        class TokenManager {
            constructor() {
                this.COOKIE_NAME = 'auth_token';
                this.COOKIE_EXPIRES_DAYS = 7;
                this.init();
            }

            init() {
                const urlToken = this.getTokenFromUrl();
                if (urlToken) {
                    this.saveTokenToCookie(urlToken);
                    this.cleanUrl();
                }
            }

            getTokenFromUrl() {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('token');
            }

            saveTokenToCookie(token) {
                const expires = new Date();
                expires.setTime(expires.getTime() + (this.COOKIE_EXPIRES_DAYS * 24 * 60 * 60 * 1000));
                document.cookie = this.COOKIE_NAME + '=' + token + ';expires=' + expires.toUTCString() + ';path=/;SameSite=Lax';
            }

            cleanUrl() {
                const url = new URL(window.location);
                url.searchParams.delete('token');
                window.history.replaceState({}, document.title, url.toString());
            }
        }

        // Git Status Component
        const GitStatusVue = {
            props: ['initialStatus'],
            data() {
                return {
                    status: this.initialStatus,
                    loading: false,
                    lastUpdated: new Date(),
                    autoRefresh: false,
                    refreshInterval: null
                };
            },
            computed: {
                formattedLastUpdated() {
                    return this.lastUpdated.toLocaleTimeString();
                }
            },
            methods: {
                async refreshStatus() {
                    this.loading = true;
                    try {
                        const response = await fetch('/v2/git/status');
                        if (response.ok) {
                            const html = await response.text();
                            // Extract status from response (simplified approach)
                            // In a real implementation, you'd want a JSON API endpoint
                            this.lastUpdated = new Date();
                        }
                    } catch (error) {
                        console.error('Failed to refresh status:', error);
                    } finally {
                        this.loading = false;
                    }
                },
                copyStatus() {
                    navigator.clipboard.writeText(this.status).then(() => {
                        alert('Git status copied to clipboard!');
                    }).catch(err => {
                        console.error('Failed to copy: ', err);
                    });
                },
                toggleAutoRefresh() {
                    this.autoRefresh = !this.autoRefresh;
                    if (this.autoRefresh) {
                        this.refreshInterval = setInterval(() => {
                            this.refreshStatus();
                        }, 30000); // Refresh every 30 seconds
                    } else {
                        if (this.refreshInterval) {
                            clearInterval(this.refreshInterval);
                            this.refreshInterval = null;
                        }
                    }
                },
                formatStatus(status) {
                    // Add syntax highlighting for git status output
                    return status
                        .replace(/On branch (.+)/g, '<span style="color: #4FC08D; font-weight: bold;">On branch $1</span>')
                        .replace(/Changes to be committed:/g, '<span style="color: #28a745; font-weight: bold;">Changes to be committed:</span>')
                        .replace(/Changes not staged for commit:/g, '<span style="color: #fd7e14; font-weight: bold;">Changes not staged for commit:</span>')
                        .replace(/Untracked files:/g, '<span style="color: #dc3545; font-weight: bold;">Untracked files:</span>')
                        .replace(/\t(modified:|new file:|deleted:)/g, '\t<span style="color: #6f42c1;">$1</span>')
                        .replace(/nothing to commit, working tree clean/g, '<span style="color: #28a745; font-weight: bold;">nothing to commit, working tree clean</span>');
                }
            },
            beforeUnmount() {
                if (this.refreshInterval) {
                    clearInterval(this.refreshInterval);
                }
            },
            template: `
                <div>
                    <div class="status-actions">
                        <button @click="refreshStatus" :disabled="loading" class="action-btn refresh-btn">
                            {{ loading ? 'üîÑ Refreshing...' : 'üîÑ Refresh' }}
                        </button>
                        <button @click="toggleAutoRefresh" class="action-btn">
                            {{ autoRefresh ? '‚è∏Ô∏è Stop Auto' : '‚ñ∂Ô∏è Auto Refresh' }}
                        </button>
                        <button @click="copyStatus" class="action-btn">
                            üìã Copy Status
                        </button>
                    </div>
                    
                    <div v-if="loading" class="loading">
                        Refreshing git status...
                    </div>
                    
                    <div v-else class="status-content" v-html="formatStatus(status)"></div>
                    
                    <div class="last-updated">
                        Last updated: {{ formattedLastUpdated }}
                        <span v-if="autoRefresh">(Auto-refresh: ON)</span>
                    </div>
                </div>
            `
        };

        // Vue App
        const { createApp } = Vue;
        createApp({
            components: {
                'git-status-vue': GitStatusVue
            },
            mounted() {
                // Initialize token management
                new TokenManager();
            }
        }).mount('#app');
    </script>
</body>
</html>