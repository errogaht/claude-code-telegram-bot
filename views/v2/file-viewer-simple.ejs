<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìÑ File Viewer</title>
    
    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/line-numbers/prism-line-numbers.min.css">
    
    <!-- Marked.js for markdown rendering -->
    <script src="https://cdn.jsdelivr.net/npm/marked@9.1.0/marked.min.js"></script>
    
    <!-- External CSS Files -->
    <link rel="stylesheet" href="/static/css/main.css">
    <link rel="stylesheet" href="/static/css/components/file-browser.css">
    
    <style>
        /* Tab switcher styles */
        .tab-switcher {
            margin: 15px 0;
            border-bottom: 2px solid #e1e5e9;
            display: flex;
            gap: 0;
        }
        
        .tab-btn {
            background: #f8f9fa;
            border: 1px solid #e1e5e9;
            border-bottom: none;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            transition: all 0.2s ease;
            border-radius: 8px 8px 0 0;
            margin-right: 2px;
        }
        
        .tab-btn:hover {
            background: #e9ecef;
            color: #495057;
        }
        
        .tab-btn.active {
            background: white;
            color: #007bff;
            border-color: #007bff #007bff white #007bff;
            position: relative;
            z-index: 1;
        }
        
        .content-view {
            background: white;
            border-radius: 0 8px 8px 8px;
            overflow: hidden;
        }
        
        /* Markdown content styles */
        .markdown-content {
            padding: 20px;
            line-height: 1.6;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        
        .markdown-content h1, .markdown-content h2, .markdown-content h3, 
        .markdown-content h4, .markdown-content h5, .markdown-content h6 {
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
        }
        
        .markdown-content h1 { font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
        .markdown-content h2 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
        .markdown-content h3 { font-size: 1.25em; }
        .markdown-content h4 { font-size: 1em; }
        .markdown-content h5 { font-size: 0.875em; }
        .markdown-content h6 { font-size: 0.85em; color: #6a737d; }
        
        .markdown-content p {
            margin-bottom: 16px;
        }
        
        .markdown-content code {
            background: rgba(27, 31, 35, 0.05);
            border-radius: 3px;
            font-size: 85%;
            margin: 0;
            padding: 0.2em 0.4em;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
        }
        
        .markdown-content pre {
            background: #f6f8fa;
            border-radius: 6px;
            font-size: 85%;
            line-height: 1.45;
            overflow: auto;
            padding: 16px;
            margin-bottom: 16px;
        }
        
        .markdown-content pre code {
            background: transparent;
            border: 0;
            display: inline;
            line-height: inherit;
            margin: 0;
            max-width: auto;
            overflow: visible;
            padding: 0;
            word-wrap: normal;
        }
        
        .markdown-content ul, .markdown-content ol {
            margin-bottom: 16px;
            padding-left: 2em;
        }
        
        .markdown-content li {
            margin-bottom: 4px;
        }
        
        .markdown-content blockquote {
            border-left: 4px solid #dfe2e5;
            color: #6a737d;
            margin: 0 0 16px;
            padding: 0 1em;
        }
        
        .markdown-content table {
            border-collapse: collapse;
            border-spacing: 0;
            margin-bottom: 16px;
            width: 100%;
        }
        
        .markdown-content table th, .markdown-content table td {
            border: 1px solid #dfe2e5;
            padding: 6px 13px;
        }
        
        .markdown-content table th {
            background: #f6f8fa;
            font-weight: 600;
        }
        
        .markdown-content a {
            color: #0366d6;
            text-decoration: none;
        }
        
        .markdown-content a:hover {
            text-decoration: underline;
        }
        
        /* Copy to clipboard styles */
        .copyable-path {
            cursor: pointer;
            color: #007cba;
            text-decoration: underline;
            font-family: monospace;
            padding: 2px 4px;
            border-radius: 3px;
            transition: background-color 0.2s;
        }
        
        .copyable-path:hover {
            background-color: #f0f8ff;
        }
        
        .copy-tooltip {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #333;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .copy-tooltip.show {
            opacity: 1;
        }
        
        /* Mobile responsive */
        @media (max-width: 768px) {
            .tab-btn {
                padding: 8px 15px;
                font-size: 13px;
            }
            
            .markdown-content {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <a href="/files" class="back-link">‚Üê Back to Files</a>
            <h1>üìÑ File Viewer</h1>
            <p><strong>File:</strong> <span class="copyable-path" onclick="copyToClipboard(this.textContent)"><%= filePath %></span></p>
        </div>
        
        <div class="file-meta">
            <strong>Language:</strong> <%= language %> | 
            <strong>Extension:</strong> <%= fileExtension %> | 
            <strong>Lines:</strong> <%= content.split('\n').length %>
        </div>
        
        <% if (fileExtension === '.md' || fileExtension === '.markdown') { %>
        <!-- Tab switcher for markdown files -->
        <div class="tab-switcher">
            <button class="tab-btn active" data-tab="raw">üìù Raw</button>
            <button class="tab-btn" data-tab="rendered">üëÅÔ∏è Rendered</button>
        </div>
        <% } %>
        
        <div class="file-content">
            <!-- Raw view (always present) -->
            <div id="raw-view" class="content-view">
                <pre class="line-numbers"><code class="language-<%= language %>"><%= content %></code></pre>
            </div>
            
            <% if (fileExtension === '.md' || fileExtension === '.markdown') { %>
            <!-- Rendered markdown view -->
            <div id="rendered-view" class="content-view" style="display: none;">
                <div class="markdown-content" id="markdown-output"></div>
            </div>
            <% } %>
        </div>
    </div>
    
    <!-- Prism.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/autoloader/prism-autoloader.min.js"></script>
    
    <script>
        // Comprehensive Token Management System
        class TokenManager {
            constructor() {
                this.COOKIE_NAME = 'auth_token';
                this.COOKIE_EXPIRES_DAYS = 7; // Token cookie expires in 7 days
                this.init();
            }

            init() {
                // Check if there's a token in the URL
                const urlToken = this.getTokenFromUrl();
                if (urlToken) {
                    // Save token to cookie
                    this.saveTokenToCookie(urlToken);
                    // Clean the URL by removing the token parameter
                    this.cleanUrl();
                }
                
                // Enhance all links to include token from cookie
                this.enhanceLinks();
            }

            getTokenFromUrl() {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('token');
            }

            saveTokenToCookie(token) {
                const expires = new Date();
                expires.setTime(expires.getTime() + (this.COOKIE_EXPIRES_DAYS * 24 * 60 * 60 * 1000));
                document.cookie = this.COOKIE_NAME + '=' + token + ';expires=' + expires.toUTCString() + ';path=/;SameSite=Lax';
                console.log('Token saved to cookie');
            }

            getTokenFromCookie() {
                const name = this.COOKIE_NAME + '=';
                const decodedCookie = decodeURIComponent(document.cookie);
                const ca = decodedCookie.split(';');
                for (let i = 0; i < ca.length; i++) {
                    let c = ca[i];
                    while (c.charAt(0) === ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) === 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return null;
            }

            cleanUrl() {
                // Remove token from URL without reloading the page
                const url = new URL(window.location);
                url.searchParams.delete('token');
                window.history.replaceState({}, document.title, url.toString());
            }

            // Add token to URLs for navigation
            addTokenToUrl(url) {
                const token = this.getTokenFromCookie();
                if (!token) return url;

                const urlObj = new URL(url, window.location.origin);
                // Only add token if it's not already present
                if (!urlObj.searchParams.has('token')) {
                    urlObj.searchParams.set('token', token);
                }
                return urlObj.toString();
            }

            // Enhanced link clicking with automatic token injection
            enhanceLinks() {
                document.addEventListener('click', (e) => {
                    const link = e.target.closest('a');
                    if (link && link.href) {
                        // Only enhance internal links (same origin)
                        try {
                            const linkUrl = new URL(link.href);
                            if (linkUrl.origin === window.location.origin && !linkUrl.searchParams.has('token')) {
                                e.preventDefault();
                                window.location.href = this.addTokenToUrl(link.href);
                            }
                        } catch (e) {
                            // Invalid URL, let it proceed normally
                        }
                    }
                });
            }
        }

        // Markdown viewer functionality
        class MarkdownViewer {
            constructor() {
                this.isMarkdownFile = document.querySelector('.tab-switcher') !== null;
                this.rawContent = null;
                this.init();
            }

            init() {
                if (!this.isMarkdownFile) return;
                
                // Store raw content
                const codeElement = document.querySelector('#raw-view code');
                if (codeElement) {
                    this.rawContent = codeElement.textContent;
                }
                
                // Setup tab switching
                this.setupTabSwitching();
                
                // Render markdown content
                this.renderMarkdown();
            }

            setupTabSwitching() {
                const tabButtons = document.querySelectorAll('.tab-btn');
                const contentViews = document.querySelectorAll('.content-view');
                
                tabButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const targetTab = e.target.getAttribute('data-tab');
                        
                        // Update active tab
                        tabButtons.forEach(btn => btn.classList.remove('active'));
                        e.target.classList.add('active');
                        
                        // Show/hide content views
                        contentViews.forEach(view => {
                            view.style.display = 'none';
                        });
                        
                        document.getElementById(targetTab + '-view').style.display = 'block';
                        
                        // Re-highlight syntax if switching to raw view
                        if (targetTab === 'raw' && window.Prism) {
                            setTimeout(() => Prism.highlightAll(), 10);
                        }
                    });
                });
            }

            renderMarkdown() {
                if (!this.rawContent || !window.marked) return;
                
                const markdownOutput = document.getElementById('markdown-output');
                if (!markdownOutput) return;
                
                try {
                    // Configure marked options for better rendering
                    marked.setOptions({
                        highlight: function(code, lang) {
                            // Use Prism for syntax highlighting in code blocks if available
                            if (window.Prism && lang && Prism.languages[lang]) {
                                return Prism.highlight(code, Prism.languages[lang], lang);
                            }
                            return code;
                        },
                        breaks: true,
                        gfm: true
                    });
                    
                    const htmlContent = marked.parse(this.rawContent);
                    markdownOutput.innerHTML = htmlContent;
                    
                    // Highlight any code blocks in the rendered markdown
                    if (window.Prism) {
                        markdownOutput.querySelectorAll('pre code').forEach(block => {
                            Prism.highlightElement(block);
                        });
                    }
                } catch (error) {
                    console.error('Error rendering markdown:', error);
                    markdownOutput.innerHTML = '<p style="color: #dc3545;">Error rendering markdown content</p>';
                }
            }
        }

        // Copy to clipboard functionality
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text.trim()).then(function() {
                showTooltip('Copied to clipboard!');
            }).catch(function(err) {
                console.error('Failed to copy: ', err);
                showTooltip('Copy failed');
            });
        }

        function showTooltip(message) {
            const tooltip = document.createElement('div');
            tooltip.className = 'copy-tooltip';
            tooltip.textContent = message;
            document.body.appendChild(tooltip);
            
            setTimeout(() => {
                tooltip.classList.add('show');
            }, 10);
            
            setTimeout(() => {
                tooltip.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(tooltip);
                }, 300);
            }, 1500);
        }

        // Initialize token manager and syntax highlighting
        document.addEventListener('DOMContentLoaded', function() {
            const tokenManager = new TokenManager();
            console.log('File viewer loaded with comprehensive token management');
            
            // Initialize syntax highlighting
            if (window.Prism) {
                Prism.highlightAll();
            }
            
            // Initialize markdown viewer
            const markdownViewer = new MarkdownViewer();
        });
    </script>
</body>
</html>