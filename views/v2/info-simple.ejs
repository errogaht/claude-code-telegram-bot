<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ QTunnel Info</title>
    
    <!-- External CSS Files -->
    <link rel="stylesheet" href="/static/css/main.css">
</head>
<body>
    <div class="container">
        <a href="/" class="back-link">‚Üê Back to Home</a>
        
        <h1>üöÄ Development Tools - QTunnel Info</h1>
        
        <div class="status">
            <strong>üåü QTunnel WebSocket Tunneling:</strong> Fast, secure tunneling with WebSocket protocol!<br>
            Direct access to your development tools through qtunnel.q9x.ru
        </div>
        
        <div class="info-section">
            <h3>Current Status</h3>
            <p><strong>Bot Instance:</strong> <%= botInstance %></p>
            <p><strong>Provider:</strong> <%= stats.provider %></p>
            <p><strong>Server:</strong> <%= stats.server %></p>
            <p><strong>Active Tunnels:</strong> <%= stats.activeTunnels %></p>
        </div>
        
        <div class="info-section">
            <h3>QTunnel Features</h3>
            <div class="provider-info">
                <strong>‚úÖ WebSocket-based tunneling</strong><br>
                <small>Fast, reliable connection using modern WebSocket protocol</small><br><br>
                <strong>‚úÖ HTTPS with SSL certificates</strong><br>
                <small>Secure encrypted connections to *.q9x.ru domain</small><br><br>
                <strong>‚úÖ No installation required</strong><br>
                <small>Binary already available at /usr/local/bin/qtunnel</small>
            </div>
        </div>
        
        <% if (stats.tunnels.length > 0) { %>
        <div class="info-section">
            <h3>Active Tunnels</h3>
            <% stats.tunnels.forEach(tunnel => { %>
                <div style="margin: 10px 0; padding: 10px; background: #f8f9fa; border-radius: 5px;">
                    <strong><%= tunnel.serviceName %></strong> (Port: <%= tunnel.port %>)<br>
                    <a href="<%= tunnel.url %>" target="_blank"><%= tunnel.url %></a><br>
                    <small>Status: <%= tunnel.status %></small>
                </div>
            <% }); %>
        </div>
        <% } %>
    </div>
    
    <script>
        // Comprehensive Token Management System
        class TokenManager {
            constructor() {
                this.COOKIE_NAME = 'auth_token';
                this.COOKIE_EXPIRES_DAYS = 7; // Token cookie expires in 7 days
                this.init();
            }

            init() {
                // Check if there's a token in the URL
                const urlToken = this.getTokenFromUrl();
                if (urlToken) {
                    // Save token to cookie
                    this.saveTokenToCookie(urlToken);
                    // Clean the URL by removing the token parameter
                    this.cleanUrl();
                }
                
                // Enhance all links to include token from cookie
                this.enhanceLinks();
            }

            getTokenFromUrl() {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('token');
            }

            saveTokenToCookie(token) {
                const expires = new Date();
                expires.setTime(expires.getTime() + (this.COOKIE_EXPIRES_DAYS * 24 * 60 * 60 * 1000));
                document.cookie = this.COOKIE_NAME + '=' + token + ';expires=' + expires.toUTCString() + ';path=/;SameSite=Lax';
                console.log('Token saved to cookie');
            }

            getTokenFromCookie() {
                const name = this.COOKIE_NAME + '=';
                const decodedCookie = decodeURIComponent(document.cookie);
                const ca = decodedCookie.split(';');
                for (let i = 0; i < ca.length; i++) {
                    let c = ca[i];
                    while (c.charAt(0) === ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) === 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return null;
            }

            cleanUrl() {
                // Remove token from URL without reloading the page
                const url = new URL(window.location);
                url.searchParams.delete('token');
                window.history.replaceState({}, document.title, url.toString());
            }

            // Add token to URLs for navigation
            addTokenToUrl(url) {
                const token = this.getTokenFromCookie();
                if (!token) return url;

                const urlObj = new URL(url, window.location.origin);
                // Only add token if it's not already present
                if (!urlObj.searchParams.has('token')) {
                    urlObj.searchParams.set('token', token);
                }
                return urlObj.toString();
            }

            // Enhanced link clicking with automatic token injection
            enhanceLinks() {
                document.addEventListener('click', (e) => {
                    const link = e.target.closest('a');
                    if (link && link.href) {
                        // Only enhance internal links (same origin)
                        try {
                            const linkUrl = new URL(link.href);
                            if (linkUrl.origin === window.location.origin && !linkUrl.searchParams.has('token')) {
                                e.preventDefault();
                                window.location.href = this.addTokenToUrl(link.href);
                            }
                        } catch (e) {
                            // Invalid URL, let it proceed normally
                        }
                    }
                });
            }
        }

        // Initialize token manager when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const tokenManager = new TokenManager();
            console.log('QTunnel info page loaded with comprehensive token management');
        });
    </script>
</body>
</html>