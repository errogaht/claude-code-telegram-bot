<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, viewport-fit=cover">
    <title>üìÑ <%= require('path').basename(filePath) %> - Vue Version</title>
    
    <!-- Vue.js -->
    <script src="/static/assets/vue.min.js"></script>
    
    <!-- Prism.js for syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/line-numbers/prism-line-numbers.min.css">
    
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            margin: 0; padding: 10px; background: #f5f5f5; 
            min-height: 100vh; overflow-x: hidden;
        }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { border-bottom: 1px solid #e1e1e1; padding-bottom: 15px; margin-bottom: 20px; }
        .back-link { display: inline-block; margin-bottom: 15px; color: #666; text-decoration: none; padding: 8px 12px; background: #f8f9fa; border-radius: 4px; }
        .back-link:hover { color: #007cba; background: #e9ecef; }
        .file-content { background: #f8f9fa; border: 1px solid #e1e1e1; border-radius: 4px; overflow-x: auto; }
        .file-content pre { margin: 0; padding: 20px; font-family: 'Monaco', 'Courier New', monospace; font-size: 14px; line-height: 1.5; }
        .line-numbers { color: #999; user-select: none; }
        .vue-badge {
            display: inline-block; background: linear-gradient(135deg, #4FC08D 0%, #42b883 100%);
            color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.8em;
            font-weight: 600; margin-left: 10px;
        }
        
        /* Vue-specific enhancements */
        .file-actions { 
            margin-bottom: 15px; display: flex; gap: 10px; flex-wrap: wrap; align-items: center;
        }
        .action-btn { 
            padding: 6px 12px; background: #007cba; color: white; text-decoration: none; 
            border-radius: 4px; font-size: 14px; transition: background 0.2s;
        }
        .action-btn:hover { background: #005a85; }
        .file-meta { 
            background: #f8f9fa; padding: 10px 15px; border-radius: 4px; 
            font-size: 14px; color: #666; margin-bottom: 15px;
        }
        .loading { text-align: center; padding: 40px; color: #666; }
        
        @media (max-width: 768px) { 
            .container { padding: 10px; margin: 10px; }
            .file-content pre { font-size: 12px; padding: 15px; }
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="container">
            <div class="header">
                <a href="/v2/files?path=<%= encodeURIComponent(require('path').dirname(filePath)) %>" class="back-link">‚Üê Back to directory</a>
                <h1>üìÑ <%= require('path').basename(filePath) %> <span class="vue-badge">Vue.js</span></h1>
                <p>Path: <%= filePath %></p>
            </div>
            
            <file-viewer-vue 
                :content="<%= JSON.stringify(content) %>"
                :file-path="'<%= filePath %>'"
                :language="'<%= language %>'"
                :file-extension="'<%= fileExtension %>'">
            </file-viewer-vue>
        </div>
    </div>
    
    <!-- Prism.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/line-numbers/prism-line-numbers.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/autoloader/prism-autoloader.min.js"></script>
    
    <script>
        // Token Management
        class TokenManager {
            constructor() {
                this.COOKIE_NAME = 'auth_token';
                this.COOKIE_EXPIRES_DAYS = 7;
                this.init();
            }

            init() {
                const urlToken = this.getTokenFromUrl();
                if (urlToken) {
                    this.saveTokenToCookie(urlToken);
                    this.cleanUrl();
                }
            }

            getTokenFromUrl() {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('token');
            }

            saveTokenToCookie(token) {
                const expires = new Date();
                expires.setTime(expires.getTime() + (this.COOKIE_EXPIRES_DAYS * 24 * 60 * 60 * 1000));
                document.cookie = this.COOKIE_NAME + '=' + token + ';expires=' + expires.toUTCString() + ';path=/;SameSite=Lax';
            }

            cleanUrl() {
                const url = new URL(window.location);
                url.searchParams.delete('token');
                window.history.replaceState({}, document.title, url.toString());
            }
        }

        // File Viewer Component
        const FileViewerVue = {
            props: ['content', 'filePath', 'language', 'fileExtension'],
            data() {
                return {
                    loading: false,
                    wordWrap: false,
                    showLineNumbers: true
                };
            },
            computed: {
                fileSize() {
                    return new Blob([this.content]).size;
                },
                fileSizeFormatted() {
                    const bytes = this.fileSize;
                    if (bytes === 0) return '0 B';
                    const k = 1024;
                    const sizes = ['B', 'KB', 'MB', 'GB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                },
                lineCount() {
                    return this.content.split('\n').length;
                },
                escapeHtml() {
                    const map = {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#039;'
                    };
                    return this.content.replace(/[&<>"']/g, m => map[m]);
                }
            },
            methods: {
                toggleWordWrap() {
                    this.wordWrap = !this.wordWrap;
                },
                toggleLineNumbers() {
                    this.showLineNumbers = !this.showLineNumbers;
                    this.$nextTick(() => {
                        // Re-initialize Prism.js
                        if (window.Prism) {
                            window.Prism.highlightAll();
                        }
                    });
                },
                copyToClipboard() {
                    navigator.clipboard.writeText(this.content).then(() => {
                        alert('Content copied to clipboard!');
                    }).catch(err => {
                        console.error('Failed to copy: ', err);
                    });
                }
            },
            mounted() {
                // Initialize syntax highlighting
                this.$nextTick(() => {
                    if (window.Prism) {
                        window.Prism.highlightAll();
                    }
                });
            },
            template: `
                <div>
                    <div class="file-meta">
                        <strong>Size:</strong> {{ fileSizeFormatted }} | 
                        <strong>Lines:</strong> {{ lineCount }} | 
                        <strong>Language:</strong> {{ language }}
                    </div>
                    
                    <div class="file-actions">
                        <button @click="toggleWordWrap" class="action-btn">
                            {{ wordWrap ? 'üìÑ No Wrap' : 'üìú Word Wrap' }}
                        </button>
                        <button @click="toggleLineNumbers" class="action-btn">
                            {{ showLineNumbers ? 'üî¢ Hide Lines' : 'üî¢ Show Lines' }}
                        </button>
                        <button @click="copyToClipboard" class="action-btn">
                            üìã Copy
                        </button>
                    </div>
                    
                    <div v-if="loading" class="loading">
                        Loading file content...
                    </div>
                    
                    <div v-else class="file-content">
                        <pre 
                            :class="showLineNumbers ? 'line-numbers' : ''"
                            :style="{ whiteSpace: wordWrap ? 'pre-wrap' : 'pre' }"
                        ><code 
                            :class="'language-' + language" 
                            v-html="escapeHtml"
                        ></code></pre>
                    </div>
                </div>
            `
        };

        // Vue App
        const { createApp } = Vue;
        createApp({
            components: {
                'file-viewer-vue': FileViewerVue
            },
            mounted() {
                // Initialize token management
                new TokenManager();
            }
        }).mount('#app');
    </script>
</body>
</html>